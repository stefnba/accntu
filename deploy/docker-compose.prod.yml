# =================================================================
# Production Docker Compose for Accntu
# Optimized for Coolify deployment with security and performance
# =================================================================

version: '3.8'

services:
  # =================================================================
  # Application Service
  # =================================================================
  app:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.prod
      args:
        - BUILDKIT_INLINE_CACHE=1
    
    restart: unless-stopped
    
    # Resource limits for production stability
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Environment variables
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_TELEMETRY_DISABLED=1
      
      # Database connection
      - DATABASE_URL=${DATABASE_URL}
      
      # Application URLs
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-Accntu}
      
      # Authentication
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      
      # Email configuration
      - EMAIL_PROVIDER=${EMAIL_PROVIDER}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS}
      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME}
      - RESEND_API_KEY=${RESEND_API_KEY}
      
      # Optional AWS configuration
      - AWS_BUCKET_REGION=${AWS_BUCKET_REGION}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    
    # Expose port internally
    expose:
      - "3000"
    
    # Port mapping (can be overridden by Coolify)
    ports:
      - "${APP_PORT:-3000}:3000"
    
    # Dependencies
    depends_on:
      db:
        condition: service_healthy
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Read-only root filesystem for security (with exceptions)
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m
      - /app/.next/cache:rw,noexec,nosuid,size=100m
    
    # Volume for uploads
    volumes:
      - uploads:/app/uploads:rw
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network
    networks:
      - app-network

  # =================================================================
  # PostgreSQL Database Service
  # =================================================================
  db:
    image: postgres:16-alpine
    
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-accntu} -d ${POSTGRES_DB:-accntu}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Environment variables
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-accntu}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-accntu}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Volume for data persistence
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - postgres_backups:/backups:rw
    
    # Internal port exposure
    expose:
      - "5432"
    
    # Port mapping for development access (remove in production)
    ports:
      - "${DB_PORT:-5432}:5432"
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network
    networks:
      - app-network

  # =================================================================
  # Redis (Optional - for caching and sessions)
  # =================================================================
  redis:
    image: redis:7-alpine
    
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Configuration
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 32mb
      --maxmemory-policy allkeys-lru
    
    # Volume for persistence
    volumes:
      - redis_data:/data:rw
    
    # Network
    networks:
      - app-network

# =================================================================
# Volumes
# =================================================================
volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local

# =================================================================
# Networks
# =================================================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16