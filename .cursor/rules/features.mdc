---
description: Feature-based architecture guidelines for consistent development patterns across all features. Covers database schemas, API endpoints, client-side hooks, and utility functions with established naming conventions and structural patterns.
globs:
alwaysApply: false
---

# Feature Architecture Rules

This project follows a strict feature-based architecture with consistent patterns across all features. Each feature is self-contained with its own database schemas, API endpoints, business logic, and client-side code.

## Feature Structure

### Simple Features

For features with a single main entity, use this structure:

```
src/features/[feature-name]/
├── server/
│   ├── db/
│   │   ├── schema.ts          # Database schemas with embedded relations
│   │   └── queries.ts         # Database query functions with withDbQuery wrapper
│   └── endpoints.ts           # Hono API endpoints
├── lib/
│   └── utils.ts               # Feature-specific utility functions
├── components/                # Feature-specific React components
├── api.ts                     # Client-side API hooks
└── schemas.ts                 # Factory-generated operation schemas
```

### Complex Features

For features with multiple related entities (2+ tables), use this layered structure:

```
src/features/[feature-name]/
├── server/
│   ├── db/
│   │   ├── queries/
│   │   │   ├── entity-one.ts  # Pure data access queries
│   │   │   └── entity-two.ts  # Pure data access queries
│   │   ├── services/
│   │   │   ├── entity-one.ts  # Business logic & validation
│   │   │   └── entity-two.ts  # Business logic & validation
│   │   └── schema.ts          # Database schemas with relations
│   ├── endpoints/
│   │   ├── entity-one.ts      # HTTP handling only
│   │   └── entity-two.ts      # HTTP handling only
│   └── endpoints.ts           # Main router
├── lib/
│   └── utils.ts               # Feature-specific utility functions
├── components/                # Feature-specific React components
├── api.ts                     # Client-side API hooks
└── schemas.ts                 # Factory-generated operation schemas
```

## Naming Conventions

### Feature Names

- Use **singular** feature names (e.g., `tag`, `bank`, `transaction`, not `tags`, `banks`, `transactions`)
- Use lowercase with hyphens for multi-word features (e.g., `bank-account`)

### Database Tables

- Use **singular** table names (e.g., `tag`, `bank`, `transaction`)
- Follow the pattern: `[feature-name]` for main tables
- Use descriptive names for junction/relation tables (e.g., `tagToTransaction`, `connectedBank`)

### File Names

- Use singular feature names in directory structure
- Use descriptive file names that indicate their purpose

## Database Schema Patterns

### Schema Organization

```typescript
// src/features/[feature]/server/db/schema.ts
import { createId } from '@paralleldrive/cuid2';
import { relations } from 'drizzle-orm';
import { pgTable, text, timestamp, boolean } from 'drizzle-orm/pg-core';

// Main entity table
export const [featureName] = pgTable('[feature_name]', {
  id: text()
    .primaryKey()
    .$defaultFn(() => createId()),
  userId: text().notNull(), // Always include userId for user-scoped data

  // Feature-specific fields
  name: text().notNull(),
  description: text(),

  // Standard audit fields
  createdAt: timestamp({ withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp({ withTimezone: true }).notNull().defaultNow(),

  // Soft delete pattern
  isActive: boolean().notNull().default(true),
});

// Embedded relations (no separate relations file)
export const [featureName]Relations = relations([featureName], ({ one, many }) => ({
  // Define relations here
}));

// Export types
export type [FeatureName] = typeof [featureName].$inferSelect;
export type New[FeatureName] = typeof [featureName].$inferInsert;
```

### Key Schema Patterns

1. **Always use CUID2** for primary keys with `createId()`
2. **Include userId** for user-scoped data
3. **Use timestamp fields** for `createdAt` and `updatedAt` with timezone
4. **Implement soft deletes** with `isActive` or `isDeleted` boolean fields
5. **Embed relations** directly in schema files (no separate relations files)
6. **Export TypeScript types** for both select and insert operations
7. **Modern Drizzle**: Column names no longer required - use `text()` instead of `text('column_name')`
8. **Critical**: All schemas must be exported from `src/server/db/schemas/index.ts` for relations to work

## Layered Architecture (Complex Features)

### Separation of Concerns

For complex features with multiple entities, use a strict three-layer architecture:

#### Queries Layer (Pure Data Access)

```typescript
// src/features/[feature]/server/db/queries/entity-name.ts
import { db } from '@/server/db';
import { withDbQuery } from '@/server/lib/handler';
import { and, eq } from 'drizzle-orm';
import { entityTable, type EntityType, type NewEntityType } from '../schema';

// Simple, descriptive function names
export const getAll = async ({ userId }: { userId: string }) =>
    withDbQuery({
        operation: 'get entities by user ID',
        queryFn: async () => {
            return await db.query.entityTable.findMany({
                where: and(eq(entityTable.userId, userId), eq(entityTable.isActive, true)),
                with: {
                    relatedEntity: true,
                },
                orderBy: (entities, { desc }) => [desc(entities.createdAt)],
            });
        },
    });

export const create = async ({ data }: { data: NewEntityType }) =>
    withDbQuery({
        operation: 'create entity',
        queryFn: async () => {
            const [result] = await db.insert(entityTable).values(data).returning();
            return result;
        },
    });
```

#### Services Layer (Business Logic)

```typescript
// src/features/[feature]/server/db/services/entity-name.ts
import * as entityQueries from '../queries/entity-name';

// Descriptive, business-focused function names
export const createEntity = async ({ userId, name }: { userId: string; name: string }) => {
    // Business validation
    if (name.length > 100) {
        throw new Error('Name must be 100 characters or less');
    }

    // Check for duplicates
    const existing = await entityQueries.getAll({ userId });
    if (existing.some((e) => e.name === name)) {
        throw new Error('Entity with this name already exists');
    }

    // Create entity
    return await entityQueries.create({
        data: { userId, name, status: 'pending' },
    });
};

export const getUserEntities = async ({ userId }: { userId: string }) => {
    return await entityQueries.getAll({ userId });
};
```

#### Endpoints Layer (HTTP Concerns)

```typescript
// src/features/[feature]/server/endpoints/entity-name.ts
import { getUser } from '@/lib/auth';
import { withRoute } from '@/server/lib/handler';
import { zValidator } from '@/server/lib/validation';
import { Hono } from 'hono';
import { z } from 'zod';
import * as entityServices from '../db/services/entity-name';

const app = new Hono();

const CreateEntitySchema = z.object({
    name: z.string().min(1, 'Name is required'),
});

app.get('/', async (c) =>
    withRoute(c, async () => {
        const user = getUser(c);
        return await entityServices.getUserEntities({ userId: user.id });
    })
);

app.post('/', zValidator('json', CreateEntitySchema), async (c) =>
    withRoute(
        c,
        async () => {
            const user = getUser(c);
            const data = c.req.valid('json');

            return await entityServices.createEntity({
                userId: user.id,
                name: data.name,
            });
        },
        201
    )
);

export default app;
```

### Layer Responsibilities

- **Queries**: Pure data access, no business logic, simple names (`create`, `getAll`, `getById`)
- **Services**: Business logic, validation, orchestration, descriptive names (`createEntity`, `getUserEntities`)
- **Endpoints**: HTTP handling, authentication, input validation, delegate to services

## Database Queries Pattern

### Query Organization (Simple Features)

```typescript
// src/features/[feature]/server/db/queries.ts
import { db } from '@/server/db';
import { withDbQuery } from '@/server/lib/handler';
import { and, eq, isNull, sql } from 'drizzle-orm';
import { z } from 'zod';
import { [featureName], type [FeatureName], type New[FeatureName] } from './schema';

// CRUD Operations with withDbQuery wrapper
export const create[FeatureName] = async ({ data }: { data: New[FeatureName] }): Promise<[FeatureName]> =>
  withDbQuery({
    operation: 'create [feature-name]',
    queryFn: async () => {
      const [result] = await db.insert([featureName]).values(data).returning();
      return result;
    },
  });

export const get[FeatureName]sByUserId = async ({ userId }: { userId: string }): Promise<[FeatureName][]> =>
  withDbQuery({
    operation: 'get [feature-name]s by user ID',
    queryFn: async () => {
      return await db
        .select()
        .from([featureName])
        .where(and(eq([featureName].userId, userId), eq([featureName].isActive, true)))
        .orderBy([featureName].name);
    },
  });

export const get[FeatureName]ById = async ({ id }: { id: string }): Promise<[FeatureName] | null> =>
  withDbQuery({
    operation: 'get [feature-name] by ID',
    queryFn: async () => {
      const [result] = await db
        .select()
        .from([featureName])
        .where(eq([featureName].id, id))
        .limit(1);
      return result || null;
    },
  });

export const update[FeatureName] = async ({
  id,
  data
}: {
  id: string;
  data: Partial<New[FeatureName]>
}): Promise<[FeatureName] | null> =>
  withDbQuery({
    operation: 'update [feature-name]',
    queryFn: async () => {
      const [updated] = await db
        .update([featureName])
        .set({ ...data, updatedAt: new Date() })
        .where(eq([featureName].id, id))
        .returning();
      return updated || null;
    },
  });

export const delete[FeatureName] = async ({ id }: { id: string }): Promise<void> =>
  withDbQuery({
    operation: 'delete [feature-name]',
    queryFn: async () => {
      await db
        .update([featureName])
        .set({ isActive: false, updatedAt: new Date() })
        .where(eq([featureName].id, id));
    },
  });
```

### Query Patterns

1. **Use withDbQuery wrapper** for all database operations for consistent error handling
2. **Use destructured object parameters** instead of positional parameters
3. **Always return typed results** using the exported types
4. **Use soft deletes** by updating `isActive` or `isDeleted` fields
5. **Include userId filtering** for user-scoped queries
6. **Update timestamps** on all update operations
7. **Include operation description** for debugging and logging
8. **Order results consistently** (usually by name or createdAt)

## API Endpoints Pattern

### Endpoint Organization

```typescript
// src/features/[feature]/server/endpoints.ts
import { getUser } from '@/lib/auth';
import { withRoute } from '@/server/lib/handler';
import { zValidator } from '@/server/lib/validation';
import { Hono } from 'hono';
import { z } from 'zod';
import * as queries from './db/queries';

// Create Hono app
const app = new Hono();

// Validation schemas
const Create[FeatureName]Schema = z.object({
  name: z.string().min(1, '[FeatureName] name is required').max(100),
  description: z.string().optional(),
});

const Update[FeatureName]Schema = Create[FeatureName]Schema.partial();

// CRUD endpoints - Use getUser(c) for authentication, not URL parameters
app.get('/[feature-name]s', async (c) =>
  withRoute(c, async () => {
    const user = getUser(c);
    return await queries.get[FeatureName]sByUserId({ userId: user.id });
  })
);

app.get('/[feature-name]s/:id', zValidator('param', z.object({ id: z.string() })), async (c) =>
  withRoute(c, async () => {
    const { id } = c.req.valid('param');
    const result = await queries.get[FeatureName]ById({ id });

    if (!result) {
      throw new Error('[FeatureName] not found');
    }

    return result;
  })
);

app.post('/[feature-name]s', zValidator('json', Create[FeatureName]Schema), async (c) =>
  withRoute(
    c,
    async () => {
      const user = getUser(c);
      const data = c.req.valid('json');
      return await queries.create[FeatureName](mdc:{ data: { ...data, userId: user.id } });
    },
    201
  )
);

app.put('/[feature-name]s/:id', zValidator('param', z.object({ id: z.string() })), zValidator('json', Update[FeatureName]Schema), async (c) =>
  withRoute(c, async () => {
    const { id } = c.req.valid('param');
    const data = c.req.valid('json');

    const updated = await queries.update[FeatureName](mdc:{ id, data });

    if (!updated) {
      throw new Error('[FeatureName] not found');
    }

    return updated;
  })
);

app.delete('/[feature-name]s/:id', zValidator('param', z.object({ id: z.string() })), async (c) =>
  withRoute(c, async () => {
    const { id } = c.req.valid('param');
    await queries.delete[FeatureName](mdc:{ id });
    return { success: true };
  })
);

export default app;
```

### Endpoint Patterns

1. **Use Hono framework** for all API endpoints (never Next.js server actions)
2. **Use withRoute wrapper** for consistent error handling
3. **Use getUser(c) for authentication** - Never include userId in URL parameters
4. **Validate all inputs** with Zod schemas and zValidator
5. **Follow RESTful conventions** for endpoint naming
6. **Return appropriate HTTP status codes** (201 for creation, 200 for updates, etc.)
7. **Handle not found cases** with proper error messages
8. **Use consistent response formats** (success objects for deletions)
9. **Extract user from context**, not from URL parameters

## Client API Pattern

### API Client Organization

```typescript
// src/features/[feature]/api.ts
import { apiClient, createMutation, createQuery } from '@/lib/api';

export const [FEATURE_NAME]_QUERY_KEYS = {
  [FEATURE_NAME]S: () => ['[feature-name]s'] as const,
  [FEATURE_NAME]: (id: string) => ['[feature-name]', id] as const,
  // Add more specific query keys as needed
} as const;

export const use[FeatureName]Endpoints = {
  /**
   * Get all [feature-name]s for the authenticated user
   */
  get[FeatureName]s: () =>
    createQuery(
      apiClient.[featureName]['[feature-name]s'].$get,
      [FEATURE_NAME]_QUERY_KEYS.[FEATURE_NAME]S()
    ),

  /**
   * Get [feature-name] by ID
   */
  get[FeatureName]: (id: string) =>
    createQuery(
      apiClient.[featureName]['[feature-name]s'][':id'].$get,
      [FEATURE_NAME]_QUERY_KEYS.[FEATURE_NAME](mdc:id)
    ),

  /**
   * Create a new [feature-name]
   */
  create[FeatureName]: () =>
    createMutation(
      apiClient.[featureName]['[feature-name]s'].$post,
      [FEATURE_NAME]_QUERY_KEYS.[FEATURE_NAME]S()
    ),

  /**
   * Update a [feature-name]
   */
  update[FeatureName]: (id: string) =>
    createMutation(
      apiClient.[featureName]['[feature-name]s'][':id'].$put,
      [FEATURE_NAME]_QUERY_KEYS.[FEATURE_NAME](mdc:id)
    ),

  /**
   * Delete a [feature-name]
   */
  delete[FeatureName]: (id: string) =>
    createMutation(
      apiClient.[featureName]['[feature-name]s'][':id'].$delete,
      [FEATURE_NAME]_QUERY_KEYS.[FEATURE_NAME](mdc:id)
    ),
};
```

### API Client Patterns

1. **Define query keys** for consistent caching and invalidation
2. **Use descriptive function names** that match the backend operations
3. **Include JSDoc comments** for all exported functions
4. **Use createQuery for GET operations** and createMutation for POST/PUT/DELETE
5. **Pass only 2 arguments to createMutation** (apiMethod, queryKey)
6. **Group related endpoints** in logical objects
7. **Remove userId from query keys** since authentication is handled server-side

## Utility Functions Pattern

### Utility Organization

```typescript
// src/features/[feature]/lib/utils.ts
import { type [FeatureName] } from '../server/db/schema';

// Type extensions for complex operations
export interface [FeatureName]WithChildren extends [FeatureName] {
  children?: [FeatureName]WithChildren[];
}

// Business logic utilities
export const validate[FeatureName]Name = (
  name: string,
  existing[FeatureName]s: [FeatureName][],
  excludeId?: string
): string | null => {
  if (!name.trim()) return '[FeatureName] name is required';
  if (name.length > 100) return '[FeatureName] name must be 100 characters or less';

  const isDuplicate = existing[FeatureName]s.some(
    (item) => item.name.toLowerCase() === name.toLowerCase() && item.id !== excludeId
  );

  if (isDuplicate) return 'A [feature-name] with this name already exists';

  return null;
};

// Data transformation utilities
export const build[FeatureName]Hierarchy = ([featureName]s: [FeatureName][]): [FeatureName]WithChildren[] => {
  // Implementation for hierarchical data
};

// Helper functions
export const generate[FeatureName]Color = (): string => {
  // Implementation for generating colors, etc.
};
```

### Utility Patterns

1. **Export type extensions** for complex operations
2. **Include validation functions** for business rules
3. **Provide data transformation utilities** for complex data structures
4. **Use descriptive function names** that indicate their purpose
5. **Include proper TypeScript typing** for all functions

## Integration Patterns

### Feature Registration

When creating a new feature, ensure it's properly integrated:

1. **Add to API routes** in the main server configuration
2. **Export from feature index** if needed
3. **Update database migrations** with new schemas
4. **Add to API client** type definitions

### Cross-Feature Dependencies

- **Minimize cross-feature dependencies** where possible
- **Use shared utilities** in `src/lib/` for common functionality
- **Import types** from other features when necessary for relationships
- **Avoid circular dependencies** between features

## Modern Factory System Architecture (Recommended)

For new features, use the sophisticated factory system that provides type-safe, consistent patterns across all layers:

### Schema Factory Pattern

```typescript
// src/features/[feature]/schemas.ts
import { createFeatureSchemas } from '@/lib/schemas';
import { [featureName]Table } from './server/db/schema';

export const { schemas: [featureName]Schemas } = createFeatureSchemas
  .registerTable([featureName]Table)
  .omit({ createdAt: true, updatedAt: true, id: true })
  .userField('userId')
  .idFields({ id: true })
  .addCore('create', ({ baseSchema, buildServiceInput }) => ({
    service: buildServiceInput({ data: baseSchema }),
    query: buildServiceInput({ data: baseSchema }),
    endpoint: { json: baseSchema }
  }))
  .addCore('getMany', ({ buildServiceInput }) => {
    const filtersSchema = z.object({ search: z.string().optional() });
    return {
      service: buildServiceInput({ filters: filtersSchema }),
      query: buildServiceInput({ filters: filtersSchema }),
      endpoint: { query: filtersSchema }
    };
  });

// Export inferred types
export type T[FeatureName]Schemas = InferSchemas<typeof [featureName]Schemas>;
```

### Query Factory Pattern

```typescript
// src/features/[feature]/server/db/queries.ts
import { createFeatureQueries } from '@/server/lib/db';
import { [featureName]Schemas } from '../../schemas';

export const [featureName]Queries = createFeatureQueries
  .registerSchema([featureName]Schemas)
  .addQuery('create', {
    operation: 'create [feature-name]',
    fn: async ({ data, userId }) => {
      const [new[FeatureName]] = await db
        .insert([featureName]Table)
        .values({ ...data, userId })
        .returning();
      return new[FeatureName];
    }
  })
  .addQuery('getMany', {
    operation: 'get [feature-name]s by user ID',
    fn: async ({ userId, filters }) => {
      return await db.query.[featureName]Table.findMany({
        where: and(eq([featureName]Table.userId, userId), eq([featureName]Table.isActive, true))
      });
    }
  });
```

### Service Factory Pattern

```typescript
// src/features/[feature]/server/services.ts
import { createFeatureServices } from '@/server/lib/service';
import { [featureName]Schemas } from '../schemas';
import { [featureName]Queries } from './db/queries';

export const [featureName]Services = createFeatureServices
  .registerSchema([featureName]Schemas)
  .registerQuery([featureName]Queries)
  .defineServices(({ queries }) => ({
    /**
     * Create a new [feature-name] with business logic validation
     */
    create: async (input) => {
      // Business logic validation here
      if (input.data.name.toLowerCase() === 'spam') {
        throw new Error('Invalid [feature-name] name');
      }
      
      return await queries.create(input);
    },
    
    /**
     * Get [feature-name]s - simple pass-through
     */
    getMany: async (input) => {
      return await queries.getMany(input);
    }
  }));
```

### Factory System Benefits

1. **Full Type Safety**: Automatic TypeScript inference across all layers
2. **Consistent Patterns**: Standardized CRUD operations and input helpers
3. **Reduced Boilerplate**: Factory-generated schemas eliminate repetitive code
4. **Schema Integration**: Seamless flow from database to API with validation
5. **Business Logic Separation**: Clear separation between data access and business rules
6. **Automatic Error Handling**: Built-in withDbQuery wrapper and operation logging

### When to Use Factory System

- **New Features**: Always use for new feature development
- **Complex Operations**: Multi-entity operations with business logic
- **Type Safety Priority**: When strict TypeScript inference is required
- **Team Consistency**: For standardized patterns across the codebase

## Legacy Patterns (Existing Code)

The following patterns are for maintaining existing features that haven't been migrated to the factory system:

## Best Practices

### Modern Approach (Factory System)

1. **Use Factory System**: Always use for new feature development
2. **Schema-first Design**: Start with `createFeatureSchemas` for type-safe operations
3. **Query Factory**: Use `createFeatureQueries` for consistent database access
4. **Service Factory**: Use `createFeatureServices` for business logic layer
5. **Type Inference**: Let TypeScript infer types from schemas
6. **Operation Descriptions**: Include meaningful descriptions for all queries

### Legacy Patterns (Existing Features)

1. **Consistency**: Follow the exact patterns established in existing features
2. **Type Safety**: Use TypeScript throughout with proper type definitions
3. **Error Handling**: Implement comprehensive error handling at all levels with withDbQuery
4. **Validation**: Validate all inputs with Zod schemas
5. **Authentication**: Always use getUser(c) for user identification, never URL parameters
6. **Documentation**: Include JSDoc comments for all public functions
7. **Testing**: Write tests for critical business logic
8. **Performance**: Consider query optimization and caching strategies
9. **Security**: Always include user authorization checks
10. **Maintainability**: Keep functions focused and modular
11. **Scalability**: Design for future feature expansion

## Examples

### Factory System Examples (Modern)

Reference the `tag` feature as a complete example of the modern factory system architecture:

- `src/features/tag/` - Complete factory system implementation with schemas, queries, and services
- `src/features/tag/schemas.ts` - Schema factory with core operations and custom operations
- `src/features/tag/server/db/queries.ts` - Query factory with type-safe database operations
- `src/features/tag/server/services.ts` - Service factory with business logic coordination

### Legacy Examples (For Maintenance)

Reference these features for legacy pattern examples:

- `src/features/bank/` - Complex feature with multiple related entities
- `src/features/label/` - Feature with hierarchical structure and validation

### Factory System Documentation

For comprehensive documentation on the factory system:

- **Schema Factory**: `src/lib/schemas/README.md` - Complete schema factory guide
- **Query Factory**: `src/server/lib/db/query/README.md` - Database query factory patterns
- **Service Factory**: `src/server/lib/service/README.md` - Business logic service factory patterns

These examples and documentation demonstrate all the patterns and conventions outlined in this document.
